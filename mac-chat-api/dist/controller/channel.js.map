{"version":3,"sources":["../../src/controller/channel.js"],"names":["config","db","api","post","req","res","newChannel","name","body","description","save","err","status","json","message","get","find","channels","findById","params","id","channel","delete","User","remove","_id"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AAEA;;;;kBAEc,gBAAoB;AAAA,MAAjBA,MAAiB,QAAjBA,MAAiB;AAAA,MAATC,EAAS,QAATA,EAAS;;AAChC,MAAIC,MAAM,sBAAV;;AAEA;AACAA,MAAIC,IAAJ,CAAS,MAAT,gCAA+B,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3C,QAAIC,aAAa,uBAAjB;AACAA,eAAWC,IAAX,GAAkBH,IAAII,IAAJ,CAASD,IAA3B;AACAD,eAAWG,WAAX,GAAyBL,IAAII,IAAJ,CAASC,WAAlC;;AAEAH,eAAWI,IAAX,CAAgB,eAAO;AACrB,UAAGC,GAAH,EAAO;AACLN,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASH,GAAX,EAArB;AACD;AACDN,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,4BAAX,EAArB;AACD,KALD;AAMD,GAXD;;AAaA;AACAZ,MAAIa,GAAJ,CAAQ,GAAR,gCAA2B,UAACX,GAAD,EAAMC,GAAN,EAAc;AACvC,sBAAQW,IAAR,CAAa,EAAb,EAAiB,UAACL,GAAD,EAAMM,QAAN,EAAmB;AAClC,UAAIN,GAAJ,EAAS;AACPN,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASH,GAAX,EAArB;AACD;AACDN,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBI,QAArB;AACD,KALD;AAMD,GAPD;;AASA;AACAf,MAAIa,GAAJ,CAAQ,MAAR,gCAA8B,UAACX,GAAD,EAAMC,GAAN,EAAc;AAC1C,sBAAQa,QAAR,CAAiBd,IAAIe,MAAJ,CAAWC,EAA5B,EAAgC,UAACT,GAAD,EAAMU,OAAN,EAAkB;AAChD,UAAIV,GAAJ,EAAS;AACPN,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASH,GAAX,EAArB;AACD;AACDN,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBQ,OAArB;AACD,KALD;AAMD,GAPD;;AASA;AACAnB,MAAIoB,MAAJ,CAAW,MAAX,gCAAiC,UAAClB,GAAD,EAAMC,GAAN,EAAc;AAC7CkB,SAAKC,MAAL,CAAY;AACVC,WAAKrB,IAAIe,MAAJ,CAAWC;AADN,KAAZ,EAEG,UAACT,GAAD,EAAMU,OAAN,EAAkB;AACnB,UAAIV,GAAJ,EAAS;AACPN,YAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAASH,GAAX,EAArB;AACD;AACDN,UAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,8BAAX,EAArB;AACD,KAPD;AAQD,GATD;;AAWA,SAAOZ,GAAP;AACD,C","file":"channel.js","sourcesContent":["import mongoose from 'mongoose';\nimport { Router } from 'express';\nimport bodyParser from 'body-parser';\nimport Channel from '../model/channel';\n\nimport { authenticate } from '../middleware/authMiddleware';\n\nexport default({ config, db }) => {\n  let api = Router();\n\n  //'/v1/channel/add' - Create\n  api.post('/add', authenticate, (req, res) => {\n    let newChannel = new Channel();\n    newChannel.name = req.body.name;\n    newChannel.description = req.body.description;\n\n    newChannel.save(err => {\n      if(err){\n        res.status(500).json({ message: err });\n      }\n      res.status(200).json({ message: 'Channel saved successfully' })\n    });\n  });\n\n  // '/v1/channel/' - Read\n  api.get('/', authenticate, (req, res) => {\n    Channel.find({}, (err, channels) => {\n      if (err) {\n        res.status(500).json({ message: err });\n      }\n      res.status(200).json(channels);\n    });\n  });\n\n  // '/v1/channel/:id' - Read 1\n  api.get('/:id', authenticate, (req, res) => {\n    Channel.findById(req.params.id, (err, channel) => {\n      if (err) {\n        res.status(500).json({ message: err });\n      }\n      res.status(200).json(channel);\n    });\n  });\n\n  // '/vq/channel/:id' -Delete\n  api.delete('/:id', authenticate, (req, res) => {\n    User.remove({\n      _id: req.params.id\n    }, (err, channel) => {\n      if (err) {\n        res.status(500).json({ message: err });\n      }\n      res.status(200).json({ message: 'Channel Successfully Removed'});\n    });\n  });\n\n  return api;\n}\n"]}